import os
from datetime import datetime

WORKDIR = os.getcwd()
cell_metrics = WORKDIR + "/cell_metrics.py"
data_sorting = WORKDIR + "/data_sort.py"
TEST_ = WORKDIR + "/New_.py"

DATE = datetime.today().strftime('%Y-%m-%d')


def param_file_read(parameter_file):
    with open(parameter_file, "r") as f:
        file_ = f.read()
    params_list = file_.split('\n')
    
    head_dir= params_list[0]
    imagej_path = params_list[1]
    input_params = params_list[2]
    cell_line = params_list[3]
    outlines_ = params_list[4]
    input_params_compact = params_list[5]
    ar_threshold = params_list[6]
    height = params_list[7]
    width = params_list[8]

    return [head_dir, imagej_path, input_params, cell_line, outlines_, input_params_compact, ar_threshold, height, width]

def dir_read(input_dirnames):                  
    with open(input_dirnames, 'r') as f:
        dir_ = f.readlines()
    dir_list = [str(i.rstrip()) for i in dir_]

    return dir_list


def file_read(input_filenames):
    with open(input_filenames, 'r') as f:
        file_ = f.readlines()
    file_list = [str(i.rstrip()) for i in file_]

    return file_list



headdir_ = param_file_read("pipeline_parameters.txt")[0]
# DIRNAMES = dir_read(f"{headdir_}/dir_names.txt")
FILENAMES = file_read(f"{headdir_}/file_names.txt")

# def get_input(wilcards):
#     input_list = []
#     if param_file_read("pipeline_parameters.txt")[4] == "yes":
#         input_list.append(expand("{dir_}_results_{metric}/{file_}.csv", dir_ = param_file_read("pipeline_parameters.txt")[0], metric = param_file_read("pipeline_parameters.txt")[2].split(" ")[0:-1], file_ = FILENAMES, allow_missing=True))
#         input_list.append(expand("{dir_}_outlines_{metric}/{file_}", dir_ = param_file_read("pipeline_parameters.txt")[0], metric = param_file_read("pipeline_parameters.txt")[2].split(" ")[0:-1], file_ = FILENAMES, allow_missing=True))
# 
#     else:
#         input_list.append(expand("{dir_}_results_{metric}/{file_}.csv", dir_ = param_file_read("pipeline_parameters.txt")[0], metric = param_file_read("pipeline_parameters.txt")[2].split(" ")[0:-1], file_ = FILENAMES, allow_missing=True))
# 
#     return input_list


# rule all:
#     input:
#         get_input

# rule all:
#     input:
#         expand("{dir_}_results_{metric}/{file_}.csv", dir_ = param_file_read("pipeline_parameters.txt")[0], metric = param_file_read("pipeline_parameters.txt")[2].split(" ")[0:-1], file_ = FILENAMES, allow_missing=True)

rule all:
    input:
        expand("{head_dir}_results_{metric}/{file_}.csv", head_dir = param_file_read("pipeline_parameters.txt")[0], metric = param_file_read("pipeline_parameters.txt")[2].split(" ")[0:-1], file_ = FILENAMES, allow_missing=True),
        expand("{head_dir}_outlines_{metric}/{file_}", head_dir = param_file_read("pipeline_parameters.txt")[0], metric = param_file_read("pipeline_parameters.txt")[2].split(" ")[0:-1], file_ = FILENAMES, allow_missing=True),
        expand("{head_dir}/summary_{metric}.csv", head_dir = param_file_read("pipeline_parameters.txt")[0], metric = param_file_read("pipeline_parameters.txt")[2].split(" ")[0:-1], allow_missing=True),




checkpoint image_analysis:
    params:
        input_files = "{file_}",
#        input_params = param_file_read("pipeline_parameters.txt")[2].split(" ")[0:-1],
        input_params = "{metric}",
        dir__name = param_file_read("pipeline_parameters.txt")[0],
        imagej_path = param_file_read("pipeline_parameters.txt")[1],
        cell_line = param_file_read("pipeline_parameters.txt")[3],
        outlines_ = param_file_read("pipeline_parameters.txt")[4],
        height_ = param_file_read("pipeline_parameters.txt")[7],
        width_ = param_file_read("pipeline_parameters.txt")[8]

    output:
        output_results="{head_dir}_results_{metric}/{file_}.csv",
        outline_images="{head_dir}_outlines_{metric}/{file_}"

    shell:
        """
        {params.imagej_path}/ImageJ-linux64 --ij2 --headless --run {cell_metrics} "input_analysis='{params.input_params}', image_dir='{params.dir__name}', cell_parameters='{params.cell_line}', outlines='{params.outlines_}', height='{params.height_}', width='{params.width_}', filenames='{params.input_files}', outputfiles='{output.output_results}', outlinefiles='{output.outline_images}'"
        """

rule data_sort:
    params:
        input_params = "{metric}",
        dir__name = param_file_read("pipeline_parameters.txt")[0],
        ar_threshold = param_file_read("pipeline_parameters.txt")[6]

    output:
        outputfile="{head_dir}summary_{metric}.csv"


    shell:
        """
        python3 {data_sorting} {params.input_params} {params.dir__name} {params.ar_threshold} {output.outputfile}
        """

#    output:
#        output_results="{dir_}_results_{metric}/{file_}.csv",
#        outline_images="{dir_}_outlines_{metric}/{file_}"


#        {params.imagej_path}/ImageJ-linux64 --ij2 --headless --run {cell_metrics} "input_analysis='{params.input_params}', image_dir_='{params.dir__name}', cell_parameters='{params.cell_line}', outlines='{params.outlines_}' , filenames='{input.filenames}', outputfiles={output.output_files}, outputimages='{output.output_outlines}'"


###        {params.imagej_path}/ImageJ-linux64 --ij2 --headless --run {cell_metrics} "input_analysis='{params.input_params}', image_dir='{params.dir__name}', cell_parameters='{params.cell_line}', outlines='{params.outlines_}', height='{params.height_}', width='{params.width_}', filenames='{params.input_files}', outputfiles='{output.output_results}', 'outlinefiles={output.outline_images}'"



#        echo {params.imagej_path}/ImageJ-linux64 --ij2 --headless --run {cell_metrics} "input_analysis='{params.analysis_metrics}', image_dir_='{params.dir__name}', cell_parameters='{params.cell_line}', outlines='{params.outlines_}'"
#        expand("{{DATE}}_results_{metric}.csv", metric = param_file_read("pipeline_parameters.txt")[2]),
#        expand("{{DATE}}_total_{metric}.csv", metric = param_file_read("pipeline_parameters.txt")[2])



#     output:
#         output_results=expand("{dir_}_results/{metric}_{file}", dir_ = param_file_read("pipeline_parameters.txt")[0], metric = param_file_read("pipeline_parameters.txt")[2].split(" ")[0:-1], file = file_read("file_names.txt")),
#         output_outlines=expand("{dir_}_outlines/{metric}_{file}", dir_ = param_file_read("pipeline_parameters.txt")[0], metric = param_file_read("pipeline_parameters.txt")[2].split(" ")[0:-1], file = file_read("file_names.txt"))


# rule all:
#     input:
#         expand("{date}_results_{metric}.csv", metric = param_file_read("pipeline_parameters.txt")[2].split(" ")[0:-1], date = DATE),
#         expand("{date}_total_{metric}.csv", metric = param_file_read("pipeline_parameters.txt")[2].split(" ")[0:-1], date = DATE)


# rule all:
#     input:
#         expand("{dir_}_results/{metric}_{file_}.txt", dir_ = param_file_read("pipeline_parameters.txt")[0], metric = param_file_read("pipeline_parameters.txt")[2].split(" ")[0:-1], file_ = FILENAMES),
#         expand("{dir_}_outlines/{metric}_{file_}", dir_ = param_file_read("pipeline_parameters.txt")[0], metric = param_file_read("pipeline_parameters.txt")[2].split(" ")[0:-1], file_ = FILENAMES)


#        {params.imagej_path}/ImageJ-linux64 --ij2 --headless --run {TEST_} "dir_='{params.dir__name}', filenames='{params.input_files}'"
